generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model gdpr_data {
  dataID                    Int                        @id @default(autoincrement())
  source                    String?                    @db.VarChar(25)
  dataConservation          Int?
  isPersonal                Boolean?
  personalDataCategoryID    Int?
  isModifiable              Boolean?
  dataTypeID                Int?
  data_ID_ref               Int?
  dataSubjectID             Int?
  gdpr_datasubject          gdpr_datasubject?          @relation(fields: [dataSubjectID], references: [dataSubjectID], onDelete: NoAction, onUpdate: NoAction, map: "gdpr_data_gdpr_datasubject_dataSubjectID_fk")
  gdpr_datatype             gdpr_datatype?             @relation(fields: [dataTypeID], references: [dataTypeID], onDelete: NoAction, onUpdate: NoAction, map: "gdpr_data_ibfk_1")
  gdpr_personaldatacategory gdpr_personaldatacategory? @relation(fields: [personalDataCategoryID], references: [PDCategoryID], onDelete: NoAction, onUpdate: NoAction, map: "gdpr_data_ibfk_2")
  gdpr_datarequest          gdpr_datarequest[]

  @@index([personalDataCategoryID], map: "personalDataCategory")
  @@index([dataTypeID], map: "gdpr_data_ibfk_1")
  @@index([dataSubjectID], map: "gdpr_data_gdpr_datasubject_dataSubjectID_fk")
}

model gdpr_datarequest {
  DataRequestID          Int                      @id @default(autoincrement())
  claim                  String?                  @db.VarChar(250)
  claimDate              DateTime?                @db.DateTime(0)
  newValue               String?                  @db.VarChar(250)
  dataReqTypeID          Int?
  dataSubjectID          Int?
  dataID                 Int?
  oldValue               String?                  @db.VarChar(250)
  gdpr_data              gdpr_data?               @relation(fields: [dataID], references: [dataID], onDelete: NoAction, onUpdate: NoAction, map: "gdpr_datarequest_ibfk_1")
  gdpr_datarequesttype   gdpr_datarequesttype?    @relation(fields: [dataReqTypeID], references: [dataReqTypeID], onDelete: NoAction, onUpdate: NoAction, map: "gdpr_datarequest_gdpr_datarequesttype_dataReqTypeID_fk")
  gdpr_datasubject       gdpr_datasubject?        @relation(fields: [dataSubjectID], references: [dataSubjectID], onDelete: NoAction, onUpdate: NoAction, map: "gdpr_datarequest_ibfk_2")
  gdpr_datarequestanswer gdpr_datarequestanswer[]

  @@index([dataID], map: "data")
  @@index([dataSubjectID], map: "dataSubject")
  @@index([dataReqTypeID], map: "gdpr_datarequest_gdpr_datarequesttype_dataReqTypeID_fk")
}

model gdpr_datarequestanswer {
  dataRequestAnswerid Int               @id @default(autoincrement())
  answer              Boolean?
  justification       String?           @db.VarChar(150)
  DataRequestID       Int?
  processedAnswer     Boolean?          @default(false)
  gdpr_datarequest    gdpr_datarequest? @relation(fields: [DataRequestID], references: [DataRequestID], onDelete: NoAction, onUpdate: NoAction, map: "gdpr_datarequestanswer_gdpr_datarequest_DataRequestID_fk")

  @@index([DataRequestID], map: "datarequest")
}

model gdpr_datasubject {
  dataSubjectID            Int                       @id @default(autoincrement())
  data_subject_id_ref      Int                       @default(0)
  tutorID                  Int?
  dataSubjectCategoryID    Int?
  gdpr_datasubjectcategory gdpr_datasubjectcategory? @relation(fields: [dataSubjectCategoryID], references: [dsCategoryID], onDelete: NoAction, onUpdate: NoAction, map: "gdpr_datasubject_gdpr_datasubjectcategory_dsCategoryID_fk")
  gdpr_tutor               gdpr_tutor?               @relation(fields: [tutorID], references: [tutorID], onDelete: NoAction, onUpdate: NoAction, map: "gdpr_datasubject_gdpr_tutor_tutorID_fk")
  gdpr_data                gdpr_data[]
  gdpr_datarequest         gdpr_datarequest[]

  @@index([data_subject_id_ref], map: "const2")
  @@index([dataSubjectCategoryID], map: "gdpr_datasubject_gdpr_datasubjectcategory_dsCategoryID_fk")
  @@index([tutorID], map: "gdpr_datasubject_gdpr_tutor_tutorID_fk")
}

model gdpr_datasubjectcategory {
  dsCategoryName   String             @db.VarChar(25)
  locationID       String?            @db.VarChar(40)
  dsCategoryID     Int                @id @default(autoincrement())
  gdpr_datasubject gdpr_datasubject[]
}

model gdpr_datatype {
  dataTypeName String      @db.VarChar(40)
  dataTypeID   Int         @id @default(autoincrement())
  gdpr_data    gdpr_data[]
}

model gdpr_personaldatacategory {
  PDCategoryID             Int         @id @default(autoincrement())
  personalDataCategoryName String?     @db.VarChar(150)
  gdpr_data                gdpr_data[]
}

model gdpr_provider {
  providerID   Int     @id @default(autoincrement())
  prName       String  @db.VarChar(40)
  prAdress     String  @db.VarChar(250)
  prPostalCode String? @db.VarChar(40)
  prCity       String? @db.VarChar(40)
  prPhone      String? @db.VarChar(40)
  prEmail      String? @db.VarChar(40)
  prCountry    String? @db.VarChar(50)
}

model gdpr_tutor {
  tutorID          Int                @id @default(autoincrement())
  tutorName        String             @db.VarChar(40)
  country          String?            @db.VarChar(100)
  gdpr_datasubject gdpr_datasubject[]

  @@index([country], map: "country")
}

model gdpr_datarequesttype {
  dataReqTypeID    Int                @id @default(autoincrement())
  dataReqTypeName  String?            @db.VarChar(50)
  gdpr_datarequest gdpr_datarequest[]
}
